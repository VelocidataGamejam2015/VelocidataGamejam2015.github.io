<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/buzz/1.1.10/buzz.min.js" type="text/javascript"></script>
</head>
<body style="background-color: black;">
<canvas tabindex='1' id="canvas" width="1024" height="1024"></canvas>
<script>
    //##########################################################################
    // The game

    var g_canvas;
    var g_ctx;
    var g_current_screen;

    var mouse_x = 0;
    var mouse_y = 0;
    var mouse_click_pending = false;
    var key_code = 0;
    var key_press_pending = false;

    //--------------------------------------------------------------------------
    const GameConstants = {
        m_grid_size: 10,
        m_initial_monsters: 5,
        m_initial_cities: 5,
        m_initial_commands: 3,
        m_command_size: 3,
        m_command_tray_height: 100,
        m_countdown_to_next_command_height: 10,
        m_max_num_commands: 9,
        m_max_initial_placement_tries: 100,

        m_land_origin_x_offset: 100,
        m_land_origin_y_offset: 100,
        m_land_width: 200,
        m_land_height: 200,

        m_city_origin_x_offset: 100,
        m_city_origin_y_offset: 100,
        m_city_width: 200,
        m_city_height: 200,

        m_land_z_order: 0,
        m_city_z_order: 1,
        m_monster_z_order: 2
    };

    //--------------------------------------------------------------------------
    // interface, for reference, not enforced
    const GameObject = {
        m_grid_x: 0, // for objects on the game grid
        m_grid_y: 0, // for objects on the game grid
        m_grid_z: 0, // for objects on the game grid
        m_z_order_y_boost: 0, // for objects on the game grid
        isClicked: function () {},
        handleTimeStep: function () {},
        paint: function () {}
    };

    //--------------------------------------------------------------------------
    // interface, for reference, not enforced
    const Screen_ = { // Screen is already declared and this is for reference anyway
        init: function (layout) {},
        reset: function () {},
        handleMouseClick: function () {},
        handleKeyPress: function () {},
        handleTimeStep: function () {},
        paint: function () {}
    };

    //--------------------------------------------------------------------------
    const Util = {
        //----------------------------------------------------------------------
        forEach: function (obj, fn)
        {
            var key;
            for (key in obj)
            {
                if (obj.hasOwnProperty(key))
                {
                    fn(obj[key]);
                }
            }
        },

        //----------------------------------------------------------------------
        randomItem: function (arr)
        {
            return arr[Math.floor(Math.random() * arr.length)];
        },

        //----------------------------------------------------------------------
        isMouseClickInCell: function (grid_x, grid_y, layout) {
            return (mouse_x >= layout.m_grid_x_offset
                + grid_x * layout.m_cell_size
            && mouse_x < layout.m_grid_x_offset
                + (grid_x + 1) * layout.m_cell_size
            && mouse_y >= layout.m_grid_y_offset
                + grid_y * layout.m_cell_size
            && mouse_y < layout.m_grid_y_offset
                + (grid_y + 1) * layout.m_cell_size);
        },

        //----------------------------------------------------------------------
        loadImage: function (url, resource_tracker) {
            var image = new Image();
            resource_tracker.add();
            image.onload = function(event) {
                resource_tracker.onload(event);
            };
            image.src = url;
            return image;
        },

        //----------------------------------------------------------------------
        loadAudio: function (url, resource_tracker) {
            var audio = new buzz.sound(
              url, {
              //formats: [ "wav" ],
              preload: true,
              autoplay: false,
              loop: false
            });
            resource_tracker.add();
            audio.bindOnce("canplay", function(event) {
                resource_tracker.onload(event)
            });
            return audio;
        }
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    var ResourceTracker = {
        m_added: 1, // I track myself loading
        m_loaded: 0,
        m_layout: null,

        //----------------------------------------------------------------------
        // from Screen
        init: function (layout)
        {
            this.m_layout = layout;
            this.onload(null); //and here I'm loaded
        },

        //----------------------------------------------------------------------
        // from Screen
        reset: function ()
        {},

        //----------------------------------------------------------------------
        // from Screen
        handleMouseClick: function ()
        {},

        //----------------------------------------------------------------------
        // from Screen
        handleKeyPress: function ()
        {},

        //----------------------------------------------------------------------
        // from Screen
        handleTimeStep: function ()
        {},

        //----------------------------------------------------------------------
        // from Screen
        paint: function ()
        {
            g_ctx.setTransform(1, 0, 0, 1, 0, 0);

            // paint the background
            g_ctx.fillStyle = "rgb(0, 0, 0)";
            g_ctx.fillRect(
                    0, 0,
                    this.m_layout.m_canvas_width, this.m_layout.m_canvas_height);

            g_ctx.font="Bold 80px Arial";
            g_ctx.fillStyle = "rgb(128, 128, 128)";
            g_ctx.textAlign = "center";
            g_ctx.textBaseline = "middle";
            g_ctx.fillText
            (
                Math.floor(100 * this.m_loaded / this.m_added) + "%",
                this.m_layout.m_canvas_width / 2,
                this.m_layout.m_canvas_height / 2
            );
        },


        //----------------------------------------------------------------------
        add: function() {
            ++this.m_added;
        },

        //----------------------------------------------------------------------
        // from Image.onload
        onload: function (event) {
            ++this.m_loaded;
            if (this.m_loaded == this.m_added)
            {
                this.onAllLoaded();
            }
        },

        //----------------------------------------------------------------------
        onAllLoaded: function() {
            switchToScreen(GameScreen);
        }
    };

    //--------------------------------------------------------------------------
    var AudioComponents = {
        m_bg: Util.loadAudio("Assets/Sound/50sBmovie.wav", ResourceTracker)
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    const LandTypes = {
        GRASS: {
            m_fill_style: "rgb(0, 255, 0)",
            m_image: Util.loadImage("Assets/Landscape/S_GrassTiled.png",
                ResourceTracker)
        },
        DIRT: {
            m_fill_style: "rgb(150, 75, 0)",
            m_image: Util.loadImage("Assets/Landscape/S_Dirt.png",
                ResourceTracker)
        },
        DESERT: {
            m_fill_style: "rgb(150, 75, 0)",
            m_image: Util.loadImage("Assets/Landscape/S_DesertTiled.png",
                ResourceTracker)
        },
        TREES: {
            m_fill_style: "rgb(0, 128, 0)",
            m_image: Util.loadImage("Assets/Landscape/S_ForestTiled.png",
                ResourceTracker)
        },
        MOUNTAINS: {
            m_fill_style: "rgb(128, 128, 128)",
            m_image: Util.loadImage("Assets/Landscape/S_MountainsTiled.png",
                ResourceTracker)
        },
        WATER: {
            m_fill_style: "rgb(128, 128, 255)",
            m_image: Util.loadImage("Assets/Landscape/S_WaterTiled.png",
                ResourceTracker)
        }
    };
    const ALL_LAND_TYPES = [];
    Util.forEach(LandTypes, function(item) { ALL_LAND_TYPES.push(item); } );

    //--------------------------------------------------------------------------
    // implements GameObject
    var Land = function (land_type, grid_x, grid_y, layout)
    {
        this.m_type = land_type;
        this.m_grid_x = grid_x;
        this.m_grid_y = grid_y;
        this.m_grid_z = GameConstants.m_land_z_order;
        this.m_z_order_y_boost = 0;
        this.m_layout = layout;

        //----------------------------------------------------------------------
        // from GameObject
        this.isClicked = function()
        {};

        //----------------------------------------------------------------------
        // from GameObject
        this.handleTimeStep = function ()
        {};

        //----------------------------------------------------------------------
        // from GameObject
        this.paint = function ()
        {
            var x_origin = this.m_layout.m_grid_x_offset
                + this.m_grid_x * this.m_layout.m_cell_size;
            var y_origin = this.m_layout.m_grid_y_offset
                + this.m_grid_y * this.m_layout.m_cell_size;
            var scale = this.m_layout.m_scale;
            g_ctx.drawImage(
                this.m_type.m_image,
                x_origin - GameConstants.m_land_origin_x_offset * scale,
                y_origin - GameConstants.m_land_origin_y_offset * scale,
                GameConstants.m_land_width * scale,
                GameConstants.m_land_height * scale);
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    const MonsterTypes = {
        GLUTTONY: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/S_GluttonousTomato.png", ResourceTracker),
            m_name: "GluttonousTomato.txt"
        },
        LUST: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/LustyCarrot.png", ResourceTracker),
            m_name: "LustyCarrot.txt"
        },
        GREED: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/S_GreedyCelery.png", ResourceTracker),
            m_name: "GreedyCelery.txt"
        },
        PRIDE: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/RedMonster.png", ResourceTracker),
            m_name: "PridefulEggplant.txt"
        },
        WRATH: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/RedMonster.png", ResourceTracker),
            m_name: "WrathfulPepper.txt"
        },
        ENVY: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/S_EnviousBroccoli.png", ResourceTracker),
            m_name: "EnviousBroccoli.txt"
        },
        SLOTH: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image: Util.loadImage("Assets/Monsters/RedMonster.png", ResourceTracker),
            m_name: "SlothfulPotato.txt"
        }
    };
    const ALL_MONSTER_TYPES = [];
    Util.forEach(MonsterTypes, function(item) { ALL_MONSTER_TYPES.push(item); } );

    //--------------------------------------------------------------------------
    // implements GameObject
    var Monster = function (monster_type, grid_x, grid_y, layout)
    {
        this.m_type = monster_type;
        this.m_commands = [];

        this.m_grid_x = grid_x;
        this.m_grid_y = grid_y;
        this.m_grid_z = GameConstants.m_monster_z_order;
        this.m_z_order_y_boost = 0;
        this.m_layout = layout;

        this.m_x_shift = 0;
        this.m_y_shift = 0;
        
        this.m_move_percent = 0;
        this.m_is_valid_step = false;

        this.m_image = this.m_type.m_image;
        this.m_name = this.m_type.m_name;
        this.m_real_width = this.m_layout.m_cell_size;
        this.m_real_height = this.m_layout.m_cell_size;
        if (this.m_image.height > this.m_image.width)
        {
            this.m_real_width = this.m_layout.m_cell_size *
                    this.m_image.width / this.m_image.height;
        }
        else
        {
            this.m_real_height = this.m_layout.m_cell_size *
                    this.m_image.height / this.m_image.width;
        }
        this.m_real_height_offset
                = this.m_layout.m_cell_size - this.m_real_height;
        this.m_real_width_offset
                = (this.m_layout.m_cell_size - this.m_real_width) / 2;

        this.m_breathing_loop = Math.floor(48 * Math.random());
        this.m_asleep = true;
        this.Z_AGE_INITIAL_VALUE = -1;
        this.m_z_age = this.Z_AGE_INITIAL_VALUE;
        this.m_z_x = 0;
        this.m_z_y = 0;

        //----------------------------------------------------------------------
        this.giveCommand = function(command)
        {
            this.m_commands.push(command);
            if (this.m_asleep)
            {
                this.beginNextStep();
            }
            this.m_asleep = false;
        };

        //----------------------------------------------------------------------
        this.beginNextStep = function()
        {
            this.m_is_valid_step
                = this.isValidStep(this.m_commands[0].m_steps[0]);
        };

        //----------------------------------------------------------------------
        this.isValidStep = function(monster_step)
        {
            if (0 == this.m_grid_x && monster_step.m_dx < 0)
            {
                return false;
            }
            if (GameConstants.m_grid_size - 1 == this.m_grid_x
                && monster_step.m_dx > 0)
            {
                return false;
            }
            if (0 == this.m_grid_y && monster_step.m_dy < 0)
            {
                return false;
            }
            if (GameConstants.m_grid_size - 1 == this.m_grid_y
                && monster_step.m_dy > 0)
            {
                return false;
            }
            return true;
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.isClicked = function()
        {
            return (mouse_x >= this.m_layout.m_grid_x_offset
                + this.m_grid_x * this.m_layout.m_cell_size
                + this.m_x_shift
                && mouse_x < this.m_layout.m_grid_x_offset
                + (this.m_grid_x + 1) * this.m_layout.m_cell_size
                + this.m_x_shift
                && mouse_y >= this.m_layout.m_grid_y_offset
                + this.m_grid_y * this.m_layout.m_cell_size
                + this.m_y_shift
                && mouse_y < this.m_layout.m_grid_y_offset
                + (this.m_grid_y + 1) * this.m_layout.m_cell_size
                + this.m_y_shift);
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.handleTimeStep = function ()
        {
            this.m_breathing_loop = (this.m_breathing_loop + 1) % 48;

            if (this.m_asleep)
            {
                this.m_z_age = this.m_z_age + 1;
                if (this.m_z_age == 0)
                {
                    this.m_z_x = this.m_layout.m_grid_x_offset
                        + this.m_grid_x * this.m_layout.m_cell_size
                        + (2 * this.m_layout.m_cell_size / 3);
                    this.m_z_y = this.m_layout.m_grid_y_offset
                        + this.m_grid_y * this.m_layout.m_cell_size
                        + (this.m_layout.m_cell_size / 3);
                }
                if (this.m_z_age >= 30)
                {
                    if (Math.random() < .05)
                    {
                        this.m_z_age = -10;
                    }
                }
                if (this.m_z_age >= 60)
                {
                    this.m_z_age = -10;
                }
                if (this.m_z_age >= 0)
                {
                    this.m_z_y = this.m_z_y - Math.random();
                    this.m_z_x = this.m_z_x + 2 * Math.random();
                }
            }
            else
            {
                this.m_move_percent += 1;

                this.m_z_order_y_boost = 0;
                if (this.m_is_valid_step)
                {
                    if (this.m_commands[0].m_steps[0].m_dy > 0
                        && this.m_move_percent >= 50)
                    {
                        this.m_z_order_y_boost = 1;
                    }
                    else if (this.m_commands[0].m_steps[0].m_dy < 0
                        && this.m_move_percent >= 50)
                    {
                        this.m_z_order_y_boost = -1;
                    }
                }

                if (this.m_move_percent >= 100)
                {
                    this.m_move_percent = 0;
                    this.m_z_order_y_boost = 0;

                    // move to next cell
                    if (this.m_is_valid_step)
                    {
                        this.m_grid_x += this.m_commands[0].m_steps[0].m_dx;
                        this.m_grid_y += this.m_commands[0].m_steps[0].m_dy;

                        var monster=this;
                        var city_index;
                        for(city_index=0; city_index < GameScreen.m_cities.length; city_index++)
                        {
                            var city = GameScreen.m_cities[city_index];
                            if (monster.m_grid_x == city.m_grid_x && monster.m_grid_y == city.m_grid_y) {
                                // monster eats the city - Remove the city from the screen
                                GameScreen.m_cities.splice(city_index, 1);
                                break;
                            }
                        }
                    }

                    // remove step
                    this.m_commands[0].m_steps.shift();
                    if (0 == this.m_commands[0].m_steps.length)
                    {
                        this.m_commands.shift();
                        if (0 == this.m_commands.length)
                        {
                            this.m_asleep = true;
                            this.m_z_age = this.Z_AGE_INITIAL_VALUE;
                        }
                    }
                    if (!this.m_asleep)
                    {
                        this.beginNextStep();
                    }
                }
            }

            if (!this.m_asleep)
            {
                var move_percent = this.m_move_percent;
                if (!this.m_is_valid_step && move_percent > 50)
                {
                    move_percent = 100 - move_percent;
                }
                var shift = move_percent / 100 * this.m_layout.m_cell_size;

                this.m_x_shift = this.m_commands[0].m_steps[0].m_dx * shift;
                this.m_y_shift = this.m_commands[0].m_steps[0].m_dy * shift;
            }
            else {
                this.m_x_shift = 0;
                this.m_y_shift = 0;
            }
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.paint = function ()
        {
            var diff = this.m_breathing_loop / 8;
            if (diff > 3)
            {
                diff = 6 - diff
            }
            g_ctx.drawImage(
                this.m_image,
                this.m_layout.m_grid_x_offset
                    + this.m_grid_x * this.m_layout.m_cell_size
                    + this.m_x_shift
                    + diff
                    + this.m_real_width_offset,
                this.m_layout.m_grid_y_offset
                    + this.m_grid_y * this.m_layout.m_cell_size
                    + this.m_y_shift
                    + 2 * diff
                    + this.m_real_height_offset,
                this.m_real_width - diff * 2,
                this.m_real_height - diff * 2
            );
            if (this.m_asleep && this.m_z_age >= 0)
            {
                g_ctx.font = "45px Arial";
                g_ctx.globalAlpha = 0.7;
                g_ctx.fillStyle = "rgb(192,192,192)";
                g_ctx.fillText(
                    "Z",
                    this.m_z_x,
                    this.m_z_y
                );
                g_ctx.globalAlpha = 1;
            }
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    const CityTypes = {
        BLUE: {
            m_fill_style: "rgb(100, 100, 255)",
            m_overlay_image: Util.loadImage("Assets/City/S_City1BlueMask.png", ResourceTracker)
        },
        RED: {
            m_fill_style: "rgb(255, 100, 100)",
            m_overlay_image: Util.loadImage("Assets/City/S_City1RedMask.png", ResourceTracker)
        }
    };
    const ALL_CITY_TYPES = [];
    Util.forEach(CityTypes, function(item) { ALL_CITY_TYPES.push(item); } );
    const CityUtil = {
        m_background_image: Util.loadImage("Assets/City/S_City1.png", ResourceTracker)
    };

    //--------------------------------------------------------------------------
    // implements GameObject
    var City = function (city_type, grid_x, grid_y, layout)
    {
        this.m_type = city_type;
        this.m_grid_x = grid_x;
        this.m_grid_y = grid_y;
        this.m_grid_z = GameConstants.m_city_z_order;
        this.m_z_order_y_boost = 0;
        this.m_layout = layout;

        //----------------------------------------------------------------------
        // from GameObject
        this.isClicked = function ()
        {};

        //----------------------------------------------------------------------
        // from GameObject
        this.handleTimeStep = function ()
        {};

        //----------------------------------------------------------------------
        // from GameObject
        this.paint = function ()
        {
            var x_origin = this.m_layout.m_grid_x_offset
                + this.m_grid_x * this.m_layout.m_cell_size;
            var y_origin = this.m_layout.m_grid_y_offset
                + this.m_grid_y * this.m_layout.m_cell_size;
            var scale = this.m_layout.m_scale;
            g_ctx.drawImage(
                CityUtil.m_background_image,
                x_origin - GameConstants.m_city_origin_x_offset * scale,
                y_origin - GameConstants.m_city_origin_y_offset * scale,
                GameConstants.m_city_width * scale,
                GameConstants.m_city_height * scale);
            g_ctx.drawImage(
                this.m_type.m_overlay_image,
                x_origin - GameConstants.m_city_origin_x_offset * scale,
                y_origin - GameConstants.m_city_origin_y_offset * scale,
                GameConstants.m_city_width * scale,
                GameConstants.m_city_height * scale);
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    // implements GameObject
    var MonsterInfoBox = function (layout)
    {
        this.m_visible = false;
        this.m_active_monster = null;
        this.m_pos_x = 0;
        this.m_pos_y = 0;
        this.m_layout = layout;
        this.m_width = Math.floor(this.m_layout.m_cell_size * 3.75);
        this.m_height = Math.floor(this.m_layout.m_cell_size * 1.75);
        this.m_banner_height = Math.floor(this.m_height * .20);
        this.m_text_height = Math.floor(this.m_banner_height * .60);
        this.m_font = this.m_text_height + "px Arial";
        this.m_name = "Undefined";
        this.m_blinker_age = 0;
        this.m_blinker_cycle = 30;

        //----------------------------------------------------------------------
        this.hide = function()
        {
          this.m_visible = false;
        };

        //----------------------------------------------------------------------
        this.showNextToMonster = function(monster)
        {
            this.m_name = monster.m_name;
            this.m_active_monster = monster;

            // try to the right of the monster
            this.m_pos_x = (monster.m_grid_x + 1) * this.m_layout.m_cell_size
                + .125 * this.m_layout.m_cell_size;
            if (this.m_pos_x + this.m_width > this.m_layout.m_grid_size)
            {
                // position to the left of the monster
                this.m_pos_x = (monster.m_grid_x ) * this.m_layout.m_cell_size
                    - .125 * this.m_layout.m_cell_size - this.m_width;
            }

            // try against top edge of monster
            this.m_pos_y = monster.m_grid_y * this.m_layout.m_cell_size
                + .125 * this.m_layout.m_cell_size;
            if (this.m_pos_y + this.m_height > this.m_layout.m_grid_size)
            {
                // position against bottom edge of the monster
                this.m_pos_y = (monster.m_grid_y + 1) * this.m_layout.m_cell_size
                   - .125 * this.m_layout.m_cell_size - this.m_height;
            }

            this.m_pos_x += this.m_layout.m_grid_x_offset;
            this.m_pos_y += this.m_layout.m_grid_y_offset;
            this.m_visible = true;
        };

        //----------------------------------------------------------------------
        this.paintline = function (text, line, is_last_line)
        {
            if (is_last_line && this.m_blinker_age > this.m_blinker_cycle / 2)
            {
                text += " _";
            }
            g_ctx.font=this.m_font;
            g_ctx.textAlign="start";
            g_ctx.textBaseline="middle";
            g_ctx.fillStyle = "rgb(192,192,192)";
            g_ctx.fillText(
                text,
                this.m_pos_x + 10,
                this.m_pos_y + this.m_banner_height * line
                + this.m_banner_height / 2
            );
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.isClicked = function ()
        {};

        //----------------------------------------------------------------------
        // from GameObject
        this.handleTimeStep = function ()
        {
            this.m_blinker_age
                = (this.m_blinker_age + 1) % this.m_blinker_cycle;
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.paint = function ()
        {
            if (!this.m_visible)
            {
                return;
            }

            g_ctx.fillStyle = "rgb(0, 0, 0)";
            g_ctx.globalAlpha=0.7;
            g_ctx.fillRect(
                this.m_pos_x, this.m_pos_y,
                this.m_width, this.m_height);
            g_ctx.globalAlpha=1;
            g_ctx.fillStyle = "rgb(192,192,192)";
            g_ctx.fillRect(
                    this.m_pos_x, this.m_pos_y,
                    this.m_width, this.m_banner_height);
            g_ctx.fillStyle = "rgb(32,32,32)";
            g_ctx.strokeRect(
                    this.m_pos_x, this.m_pos_y,
                    this.m_width, this.m_height);
            g_ctx.font=this.m_font;
            g_ctx.textAlign="start";
            g_ctx.textBaseline="middle";
            g_ctx.fillText(
                this.m_name,
                this.m_pos_x + 5,
                this.m_pos_y + this.m_banner_height/2
            );

            var command_index;
            for (command_index = 0;
                command_index < this.m_active_monster.m_commands.length;
                ++command_index)
            {
                this.paintline("> "
                    + this.m_active_monster.m_commands[command_index].getText(),
                    command_index + 1, false);
            }
            this.paintline(">", command_index + 1, true);
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    const MonsterSteps = {
        MOVE_UP: {
            m_dx: 0,
            m_dy: -1,
            m_rotate_left: "MOVE_LEFT",
            m_rotate_right: "MOVE_RIGHT",
            m_char: " \u2191 "
        },
        MOVE_DOWN: {
            m_dx: 0,
            m_dy: 1,
            m_rotate_left: "MOVE_RIGHT",
            m_rotate_right: "MOVE_LEFT",
            m_char: " \u2193 "
        },
        MOVE_LEFT: {
            m_dx: -1,
            m_dy: 0,
            m_rotate_left: "MOVE_DOWN",
            m_rotate_right: "MOVE_UP",
            m_char: "\u2190"
        },
        MOVE_RIGHT: {
            m_dx: 1,
            m_dy: 0,
            m_rotate_left: "MOVE_UP",
            m_rotate_right: "MOVE_DOWN",
            m_char: "\u2192"
        }
    };
    const ALL_MONSTER_STEP_TYPES = [];
    Util.forEach(MonsterSteps, function(item) { ALL_MONSTER_STEP_TYPES.push(item); } );

    //--------------------------------------------------------------------------
    var MonsterCommand = function(layout)
    {
        this.m_steps = [];
        this.m_layout = layout;

        //----------------------------------------------------------------------
        this.push = function (monster_step)
        {
            this.m_steps.push(monster_step);
        };

        //----------------------------------------------------------------------
        this.rotate_left = function()
        {
            var new_steps = [];
            Util.forEach(this.m_steps, function(step) {
               new_steps.push(MonsterSteps[step.m_rotate_left]);
            });
            this.m_steps = new_steps;
        };

        //----------------------------------------------------------------------
        this.rotate_right = function()
        {
            var new_steps = [];
            Util.forEach(this.m_steps, function(step) {
                new_steps.push(MonsterSteps[step.m_rotate_right]);
            });
            this.m_steps = new_steps;
        };

        //----------------------------------------------------------------------
        this.getText = function()
        {
            var text = "";
            Util.forEach(this.m_steps, function (step)
            {
                text += step.m_char;
            });
            return text;
        };

        //----------------------------------------------------------------------
        this.paint = function(x, y)
        {
            g_ctx.fillStyle = "rgb(192,192,192)";
            g_ctx.font = "Bold 20px Arial";
            g_ctx.textAlign="start";
            g_ctx.textBaseline="middle";
            g_ctx.fillText(this.getText(), x, y);
        }
    };

    //--------------------------------------------------------------------------
    // implements GameObject
    var CommandTray = function(layout)
    {
        this.m_commands = [];
        this.m_shake = 0;
        this.m_layout = layout;
        this.m_countdown_to_next_command_progress = 0.0;

        //----------------------------------------------------------------------
        this.add_command = function ()
        {
            var monster_command = new MonsterCommand();
            for (step_index = 0;
                 step_index < GameConstants.m_command_size;
                 ++step_index)
            {
                monster_command.push(
                        Util.randomItem(ALL_MONSTER_STEP_TYPES), layout);
            }
            this.m_commands.push(monster_command);
        };

        //----------------------------------------------------------------------
        this.dequeue = function ()
        {
            return this.m_commands.shift();
        };

        //----------------------------------------------------------------------
        this.rotate_left = function()
        {
            Util.forEach(this.m_commands, function(command) {
                command.rotate_left();
            });
        };

        //----------------------------------------------------------------------
        this.rotate_right = function()
        {
            Util.forEach(this.m_commands, function(command) {
                command.rotate_right();
            });
        };

        //----------------------------------------------------------------------
        this.shake = function ()
        {
            this.m_shake = 3 * 2 * Math.PI;
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.isClicked = function ()
        {};

        //----------------------------------------------------------------------
        // from GameObject
        this.handleTimeStep = function ()
        {
            if (this.m_shake > 0) {
                this.m_shake -= Math.PI * 2 / 3;
            }
            this.m_countdown_to_next_command_progress += 0.25;

            if (this.m_countdown_to_next_command_progress >= 100)
            {
                if (this.m_commands.length >= GameConstants.m_max_num_commands)
                {
                    this.m_countdown_to_next_command_progress = 100.0;
                }
                else
                {
                    this.m_countdown_to_next_command_progress = 0.0;
                    this.add_command();
                }
            }
        };

        //----------------------------------------------------------------------
        // from GameObject
        this.paint = function()
        {
            var layout = this.m_layout;
            var x_offset = layout.m_grid_x_offset + layout.m_cell_size / 2;
            var y_offset = layout.m_command_tray_y_offset
                + (GameConstants.m_command_tray_height - GameConstants.m_countdown_to_next_command_height) / 2;

            var shake_offset = 0;
            if (this.m_shake > 0) {
                shake_offset = Math.sin(this.m_shake) * 5;
                x_offset += shake_offset;
            }

            g_ctx.fillStyle = "rgb(0, 0, 0)";
            g_ctx.fillRect(
                0, this.m_layout.m_command_tray_y_offset,
                this.m_layout.m_canvas_width, GameConstants.m_command_tray_height);
            g_ctx.strokeStyle = "rgb(255, 255, 255)";
            g_ctx.strokeRect(
                shake_offset + this.m_layout.m_grid_x_offset,
                this.m_layout.m_command_tray_y_offset + 5,
                this.m_layout.m_grid_size,
                GameConstants.m_command_tray_height - 10);

            g_ctx.fillStyle = "rgb(32, 192, 32)";
            g_ctx.fillRect(
                shake_offset + this.m_layout.m_grid_x_offset,
                this.m_layout.m_countdown_to_next_command_offset_y + 6,
                this.m_layout.m_grid_size * this.m_countdown_to_next_command_progress / 100.0,
                GameConstants.m_countdown_to_next_command_height);

            Util.forEach(this.m_commands, function(command) {
               command.paint(x_offset, y_offset);
                x_offset += layout.m_cell_size
            });
        }
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    // implements Screen
    var GameScreen = {
        m_lands: null,
        m_monsters: null,
        m_cities: null,
        m_monster_info_box: null,
        m_command_tray: null,
        m_active_monster: null,
        m_layout: null,
        m_next_city_percent: 0,

        //----------------------------------------------------------------------
        containsCity: function (grid_x, grid_y)
        {
            var index;
            for (index=0; index < this.m_cities.length; ++index)
            {
                if (this.m_cities[index].m_grid_x == grid_x && this.m_cities[index].m_grid_y == grid_y)
                {
                    return true;
                }
            }
            return false;
        },

        //----------------------------------------------------------------------
        containsMonster: function (grid_x, grid_y)
        {
            var index;
            for (index=0; index < this.m_monsters.length; ++index)
            {
                if (this.m_monsters[index].m_grid_x == grid_x && this.m_monsters[index].m_grid_y == grid_y)
                {
                    return true;
                }
            }
            return false;
        },

        //----------------------------------------------------------------------
        // from Screen
        init: function (layout)
        {
            this.m_layout = layout;
        },

        //-------------------------------------------------------------------
        // from Screen
        reset: function ()
        {
            // initialize land
            var grid_x, grid_y;
            this.m_lands = [];
            var layout = this.m_layout;
            for (grid_x = 0; grid_x < GameConstants.m_grid_size; ++grid_x)
            {
                for (grid_y = 0; grid_y < GameConstants.m_grid_size; ++grid_y)
                {
                    this.m_lands.push(
                        new Land(Util.randomItem(ALL_LAND_TYPES),
                            grid_x, grid_y, layout));
                }
            }

            // initialize cities
            this.m_cities = [];
            var city_index;
            for (city_index = 0;
                 city_index < GameConstants.m_initial_cities;
                 ++city_index)
            {
                var tries = 0;
                while (true)
                {
                    grid_x = Math.floor(Math.random() * GameConstants.m_grid_size);
                    grid_y = Math.floor(Math.random() * GameConstants.m_grid_size);
                    if (!this.containsCity(grid_x, grid_y))
                    {
                        break;
                    }
                    tries += 1;
                    if (tries == GameConstants.m_max_initial_placement_tries)
                    {
                        break;
                    }
                }
                if (tries < GameConstants.m_max_initial_placement_tries)
                {
                    this.m_cities.push(
                        new City(Util.randomItem(ALL_CITY_TYPES),
                            grid_x, grid_y, layout));
                }
            }

            // initialize monsters
            this.m_monsters = [];
            var monster_index;
            for (monster_index = 0;
                monster_index < GameConstants.m_initial_monsters;
                ++monster_index)
            {
                var tries = 0;
                while (true)
                {
                    grid_x = Math.floor(Math.random() * GameConstants.m_grid_size);
                    grid_y = Math.floor(Math.random() * GameConstants.m_grid_size);
                    if (!this.containsCity(grid_x, grid_y) && !this.containsMonster(grid_x, grid_y))
                    {
                        break;
                    }
                    tries += 1;
                    if (tries == GameConstants.m_max_initial_placement_tries)
                    {
                        break;
                    }
                }
                if (tries < GameConstants.m_max_initial_placement_tries)
                {
                    this.m_monsters.push(
                        new Monster(Util.randomItem(ALL_MONSTER_TYPES),
                            grid_x, grid_y, layout));
                }
            }

            this.m_monster_info_box = new MonsterInfoBox(layout);

            // initialize commands
            this.m_command_tray = new CommandTray(layout);
            var command_index, step_index;
            for (command_index = 0;
                command_index < GameConstants.m_initial_commands;
                ++command_index)
            {
                this.m_command_tray.add_command();
            }
        },

        //-------------------------------------------------------------------
        // from Screen
        handleMouseClick: function ()
        {
            var clicked_monster = null;
            Util.forEach(this.m_monsters, function(monster) {
                if (monster.isClicked())
                {
                    clicked_monster = monster;
                }
            });

            if (null != clicked_monster
                && (null == this.m_active_monster
                    || this.m_active_monster != clicked_monster))
            {
                this.m_monster_info_box.showNextToMonster(clicked_monster);
                this.m_active_monster = clicked_monster;
            }
            else
            {
                this.m_monster_info_box.hide();
                this.m_active_monster = null;
            }
        },

        //-------------------------------------------------------------------
        // from Screen
        handleKeyPress: function ()
        {
            if (49 == key_code) // 1
            {
              //play the sound and restart it
              if (!AudioComponents.m_bg.isPaused())
              {
                AudioComponents.m_bg.stop();
                AudioComponents.m_bg.setTime(0);
                AudioComponents.m_bg.play();
              }
              AudioComponents.m_bg.play();
            }
            else if (50 == key_code) //20
            {
              //start background music loop
              AudioComponents.m_bg.loop().play();
            }
            else if (65 == key_code) // a
            {
                this.m_command_tray.rotate_left();
            }
            else if (68 == key_code) // d
            {
                this.m_command_tray.rotate_right();
            }
            else if (83 == key_code) // s
            {
                if (null == this.m_active_monster
                    || 0 == this.m_command_tray.m_commands.length)
                {
                    this.m_command_tray.shake();
                }
                else
                {
                    var command = this.m_command_tray.dequeue();
                    this.m_active_monster.giveCommand(command);
                }
            }
            //alert(key_code);
        },

        //----------------------------------------------------------------------
        // from Screen
        handleTimeStep: function ()
        {
            Util.forEach(this.m_lands, function(land){
                land.handleTimeStep();
            });

            Util.forEach(this.m_monsters, function(monster){
                monster.handleTimeStep();
            });

            Util.forEach(this.m_cities, function(city){
                city.handleTimeStep();
            });

            this.m_monster_info_box.handleTimeStep();

            this.m_command_tray.handleTimeStep();

            this.handleSpawnCityTimeStep()
        },

        //----------------------------------------------------------------------
        handleSpawnCityTimeStep: function ()
        {
            this.m_next_city_percent += 1;
            if (this.m_next_city_percent >= 100)
            {
                this.m_next_city_percent = 0;

                var spawn_sites_map = {};
                var maybePlaceCity = function(city, x, y) {
                    if (GameScreen.canPlaceCityAtGrid(x, y))
                    {
                        spawn_sites_map[x + "," + y] = [city, x, y];
                    }
                };
                var maybePlaceAroundCity = function(city, x, y) {
                    maybePlaceCity(city, x + 1, y);
                    maybePlaceCity(city, x - 1, y);
                    maybePlaceCity(city, x, y + 1);
                    maybePlaceCity(city, x, y - 1);
                };
                Util.forEach(this.m_cities, function(city){
                    maybePlaceAroundCity(city, city.m_grid_x, city.m_grid_y)
                });
                var spawn_sites_arr = [];
                Util.forEach(spawn_sites_map, function (site){
                    spawn_sites_arr.push(site);
                });
                if (0 != spawn_sites_arr.length)
                {
                    var spawn_site = Util.randomItem(spawn_sites_arr);
                    var old_city = spawn_site[0];
                    var grid_x = spawn_site[1];
                    var grid_y = spawn_site[2];
                    var new_city = new City(
                        old_city.m_type, grid_x, grid_y, this.m_layout);
                    this.m_cities.push(new_city);
                }
            }
        },

        //----------------------------------------------------------------------
        canPlaceCityAtGrid: function (x, y)
        {
            if (x < 0 || x >= GameConstants.m_grid_size
                || y < 0 || y >= GameConstants.m_grid_size)
            {
                return false;
            }
            var return_value = true;
            Util.forEach(this.m_cities.concat(this.m_monsters), function(game_object){
                if (game_object.m_grid_x == x && game_object.m_grid_y == y)
                {
                    return_value = false;
                }
            });

            return return_value;
        },

        //----------------------------------------------------------------------
        // from Screen
        paint: function ()
        {
            // paint the background
            g_ctx.setTransform(1, 0, 0, 1, 0, 0);
            g_ctx.fillStyle = "rgb(0, 0, 0)";
            g_ctx.fillRect(
                0, 0,
                this.m_layout.m_canvas_width, this.m_layout.m_canvas_height);

            Util.forEach(this.m_lands, function(land){
                land.paint();
            });

            var paintables = [];
            paintables = paintables.concat(this.m_cities, this.m_monsters);
            paintables.sort(function(left, right) {

                var left_y = left.m_grid_y + left.m_z_order_y_boost;
                var right_y = right.m_grid_y + right.m_z_order_y_boost;

                if (left_y < right_y)
                {
                    return -1;
                }
                else if (left_y > right_y)
                {
                    return 1;
                }
                else if (left.m_grid_z < right.m_grid_z)
                {
                    return -1;
                }
                else if (left.m_grid_z > right.m_grid_z)
                {
                    return 1;
                }
                else if (left.m_grid_x < right.m_grid_x)
                {
                    return -1;
                }
                else if (left.m_grid_x > right.m_grid_x)
                {
                    return 1;
                }
                return 0;
            });

            Util.forEach(paintables, function(paintable){
                paintable.paint();
            });

            this.m_monster_info_box.paint();

            this.m_command_tray.paint();
        }
    };

    //##########################################################################
    // game engine

    //--------------------------------------------------------------------------
    function init() {
        //Canvas stuff
        var canvas_obj = $("#canvas");
        g_canvas = canvas_obj[0];
        g_ctx = g_canvas.getContext("2d");
        g_ctx.textAlign="start";
        g_ctx.textBaseline="middle";

        var layout = {};
        layout.m_canvas_width = canvas_obj.width();
        layout.m_canvas_height = canvas_obj.height();
        layout.m_command_tray_y_offset
            = layout.m_canvas_height - GameConstants.m_command_tray_height;
        layout.m_countdown_to_next_command_offset_y
            = layout.m_canvas_height -
                GameConstants.m_countdown_to_next_command_height - 10;

        var cell_size_by_width
            = layout.m_canvas_width / GameConstants.m_grid_size;
        var cell_size_by_height
            = layout.m_command_tray_y_offset / GameConstants.m_grid_size;
        layout.m_cell_size = Math.min(cell_size_by_width, cell_size_by_height);
        layout.m_grid_size = layout.m_cell_size * GameConstants.m_grid_size;
        layout.m_grid_x_offset
            = (layout.m_canvas_width - layout.m_grid_size) / 2;
        layout.m_grid_y_offset
            = (layout.m_command_tray_y_offset - layout.m_grid_size) / 2;
        layout.m_scale = layout.m_cell_size / 100;

        g_canvas.addEventListener("mousedown", function (event) {
            var rect = g_canvas.getBoundingClientRect();
            mouse_x = event.clientX - rect.left;
            mouse_y = event.clientY - rect.top;
            mouse_click_pending = true;
        }, false);

        g_canvas.addEventListener("keydown", function (event) {
            key_code = event.which;
            key_press_pending = true;
        }, false);

        // can't do this until you've set up canvas_width and canvas_height
        ResourceTracker.init(layout);
        GameScreen.init(layout);

        switchToScreen(ResourceTracker);

        // start processing events
        setTimeout(eventLoop, 40);
    }

    //--------------------------------------------------------------------------
    function switchToScreen(screen)
    {
        screen.reset();
        g_current_screen = screen;
    }

    //--------------------------------------------------------------------------
    function eventLoop() {
        var start_time = Date.now();

        if (mouse_click_pending) {
            mouse_click_pending = false;
            g_current_screen.handleMouseClick();
        }

        if (key_press_pending) {
            key_press_pending = false;
            g_current_screen.handleKeyPress();
        }

        g_current_screen.handleTimeStep();
        g_current_screen.paint();

        var end_time = Date.now();
        var comp_time = end_time - start_time;
        if (comp_time > 40 || comp_time < 0) {
            setTimeout(eventLoop, 0);
        }
        else {
            setTimeout(eventLoop, 40 - comp_time);
        }
    }

    // launch the game once the document is fully loaded
    $(document).ready(init);

</script>
</body>
</html>
