<!DOCTYPE html>
<html>
<head>
    <title></title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
</head>
<body style="background-color: black;">
<canvas tabindex='1' id="canvas" width="1024" height="1024"></canvas>
<script>
    //#######################################################################
    // The game

    var canvas;
    var g_ctx;
    var canvas_width;
    var canvas_height;
    var g_cell_size;
    var current_screen;

    var mouse_x = 0;
    var mouse_y = 0;
    var mouse_click_pending = false;
    var key_code = 0;
    var key_press_pending = false;

    //--------------------------------------------------------------------------
    const GameConstants = {
        m_grid_size: 10,
        m_initial_monsters: 2,
        m_initial_cities: 3
    };

    //--------------------------------------------------------------------------
    const Util = {
        forEach: function (obj, fn)
        {
            var key;
            for (key in obj)
            {
                if (obj.hasOwnProperty(key))
                {
                    fn(obj[key]);
                }
            }
        },

        randomItem: function (arr)
        {
            return arr[Math.floor(Math.random() * arr.length)];
        }
    };
    //--------------------------------------------------------------------------

    //##########################################################################

    //--------------------------------------------------------------------------
    const LandTypes = {
        GRASS: {
            m_fill_style: "rgb(0, 255, 0)"
        },
        DIRT: {
            m_fill_style: "rgb(150, 75, 0)"
        },
        TREES: {
            m_fill_style: "rgb(0, 128, 0)"
        },
        ROCKS: {
            m_fill_style: "rgb(128, 128, 128)"
        },
        WATER: {
            m_fill_style: "rgb(128, 128, 255)"
        }
    };
    const ALL_LAND_TYPES = [];
    Util.forEach(LandTypes, function(item) { ALL_LAND_TYPES.push(item); } );

    //--------------------------------------------------------------------------
    var Land = function (land_type, grid_x, grid_y)
    {
        this.m_type = land_type;
        this.m_grid_x = grid_x;
        this.m_grid_y = grid_y;

        //----------------------------------------------------------------------
        this.paint = function ()
        {
            g_ctx.fillStyle = this.m_type.m_fill_style;
            g_ctx.fillRect(
                this.m_grid_x * g_cell_size, this.m_grid_y * g_cell_size,
                g_cell_size, g_cell_size);
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    const MonsterTypes = {
        GLUTTONY: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/S_GluttonousTomato.png",
            m_name: "GluttonousTomato.txt"
        },
        LUST: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/LustyCarrot.png",
            m_name: "LustyCarrot.txt"
        },
        GREED: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/RedMonster.png",
            m_name: "RedMonster.txt"
        },
        PRIDE: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/RedMonster.png",
            m_name: "RedMonster.txt"
        },
        WRATH: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/RedMonster.png",
            m_name: "RedMonster.txt"
        },
        ENVY: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/RedMonster.png",
            m_name: "RedMonster.txt"
        },
        SLOTH: {
            m_fill_style: "rgb(255, 127, 0)",
            m_image_source_file: "Assets/Monsters/RedMonster.png",
            m_name: "RedMonster.txt"
        }
    };
    const ALL_MONSTER_TYPES = [];
    Util.forEach(MonsterTypes, function(item) { ALL_MONSTER_TYPES.push(item); } );

    //--------------------------------------------------------------------------
    var Monster = function (monster_type, grid_x, grid_y)
    {
        this.m_type = monster_type;
        this.m_grid_x = grid_x;
        this.m_grid_y = grid_y;

        this.m_image = new Image();
        this.m_ready = false;
        this.m_image.src = this.m_type.m_image_source_file;
        this.m_name = this.m_type.m_name;
        this.m_loop = 0;

        //----------------------------------------------------------------------
        this.isClicked = function()
        {
            return isMouseClickInCell(this.m_grid_x, this.m_grid_y)
        };

        //----------------------------------------------------------------------
        this.paint = function ()
        {
            this.m_loop = (this.m_loop + 1) % 50;
            var diff = this.m_loop / 5;
            if (diff > 5)
            {
                diff = 10 - diff
            }
            g_ctx.drawImage
            (
                this.m_image,
                this.m_grid_x * g_cell_size + diff,
                this.m_grid_y * g_cell_size + diff,
                g_cell_size - diff * 2,
                g_cell_size - diff * 2
            );

            // g_ctx.fillStyle = this.m_type.m_fill_style;
            // g_ctx.fillRect(this.m_grid_x * g_cell_size, this.m_grid_y * g_cell_size, g_cell_size, g_cell_size);
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    const CityTypes = {
        BLUE: {
            m_fill_style: "rgb(100, 100, 255)"
        },
        RED: {
            m_fill_style: "rgb(255, 100, 100)"
        }
    };
    const ALL_CITY_TYPES = [];
    Util.forEach(CityTypes, function(item) { ALL_CITY_TYPES.push(item); } );

    //--------------------------------------------------------------------------
    var City = function (city_type, grid_x, grid_y)
    {
        this.m_type = city_type;
        this.m_grid_x = grid_x;
        this.m_grid_y = grid_y;

        //----------------------------------------------------------------------
        this.paint = function ()
        {
            g_ctx.fillStyle = this.m_type.m_fill_style;
            g_ctx.beginPath();
            g_ctx.arc(
                this.m_grid_x * g_cell_size + g_cell_size / 2,
                this.m_grid_y * g_cell_size + g_cell_size / 2
                , g_cell_size / 3, 0, 2 * Math.PI);
            g_ctx.fill();
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    var MonsterInfoBox = function ()
    {
        this.m_visible = false;
        this.m_pos_x = 0;
        this.m_pos_y = 0;
        this.m_width = Math.floor(g_cell_size * 3.75);
        this.m_height = Math.floor(g_cell_size * 1.75);
        this.m_name = "Undefined";

        //----------------------------------------------------------------------
        this.hide = function()
        {
          this.m_visible = false;
        };

        //----------------------------------------------------------------------
        this.showNextToMonster = function(monster)
        {
            this.m_name = monster.m_name;
            // try to the right of the monster
            this.m_pos_x = Math.floor((monster.m_grid_x + 1) * g_cell_size
                + .125 * g_cell_size);
            if (this.m_pos_x + this.m_width > canvas_width)
            {
                // position to the left of the monster
                this.m_pos_x = Math.floor((monster.m_grid_x ) * g_cell_size
                    - .125 * g_cell_size - this.m_width);
            }

            // try against top edge of monstor
            this.m_pos_y = monster.m_grid_y * g_cell_size + .125 * g_cell_size;
            if (this.m_pos_y + this.m_height > canvas_height)
            {
                // position against bottom edge of the monster
                this.m_pos_y = (monster.m_grid_y + 1) * g_cell_size
                   - .125 * g_cell_size - this.m_height;
            }
            this.m_visible = true;
        };

        //----------------------------------------------------------------------
        this.paint = function ()
        {
            if (!this.m_visible)
            {
                return;
            }

            g_ctx.fillStyle = "rgb(0, 0, 0)";
            g_ctx.globalAlpha=0.7;
            g_ctx.fillRect(
                this.m_pos_x, this.m_pos_y,
                this.m_width, this.m_height);
            g_ctx.globalAlpha=1;
            g_ctx.fillStyle = "rgb(192,192,192)"
            g_ctx.fillRect(
                    this.m_pos_x, this.m_pos_y,
                    this.m_width, g_cell_size/3);
            g_ctx.fillStyle = "rgb(32,32,32)"
            g_ctx.strokeRect(
                    this.m_pos_x, this.m_pos_y,
                    this.m_width, this.m_height);
            g_ctx.font="18px Arial";
            g_ctx.textAlign="start";
            g_ctx.textBaseline="middle";
            g_ctx.fillText(this.m_name,this.m_pos_x + 5,this.m_pos_y + g_cell_size/6);
        };
    };

    //##########################################################################

    //--------------------------------------------------------------------------
    function init() {
        //Canvas stuff
        canvas = $("#canvas")[0];
        g_ctx = canvas.getContext("2d");
        canvas_width = $("#canvas").width();
        canvas_height = $("#canvas").height();
        g_ctx.textAlign = "center";
        g_ctx.textBaseline = "middle";

        //Lets save the cell width in a variable for easy control
        g_cell_size = canvas_height / GameConstants.m_grid_size;

        canvas.addEventListener("mousedown", function (event) {
            var rect = canvas.getBoundingClientRect();
            mouse_x = event.clientX - rect.left;
            mouse_y = event.clientY - rect.top;
            mouse_click_pending = true;
        }, false);

        canvas.addEventListener("keydown", function (event) {
            key_code = event.which;
            key_press_pending = true;
        }, false);

        //can't do this until you've set up canvas_width and canvas_height
        GameScreen.init();
        GameScreen.reset();
        current_screen = GameScreen;

        // start processing events
        setTimeout(eventLoop, 40);
    }

    //--------------------------------------------------------------------------
    var isMouseClickInCell = function (grid_x, grid_y) {
        return (mouse_x >= grid_x * g_cell_size
        && mouse_x < (grid_x + 1) * g_cell_size
        && mouse_y >= grid_y * g_cell_size
        && mouse_y < (grid_y +1) * g_cell_size);
    };

    //--------------------------------------------------------------------------
    var GameScreen = {
        m_land: null,
        m_monsters: null,
        m_cities: null,
        m_monster_info_box: null,

        //----------------------------------------------------------------------
        init: function ()
        {
            var grid_x, grid_y;

            // initialize land
            this.m_land = [];
            for (grid_x = 0; grid_x < GameConstants.m_grid_size; ++grid_x)
            {
                this.m_land[grid_x] = [];
                for (grid_y = 0; grid_y < GameConstants.m_grid_size; ++grid_y)
                {
                    this.m_land[grid_x][grid_y]
                        = new Land(Util.randomItem(ALL_LAND_TYPES), grid_x, grid_y);
                }
            }

            // initialize monsters
            this.m_monsters = [];
            var monster_index;
            for (monster_index = 0;
                monster_index < GameConstants.m_initial_monsters;
                ++monster_index)
            {
                grid_x = Math.floor(Math.random() * GameConstants.m_grid_size);
                grid_y = Math.floor(Math.random() * GameConstants.m_grid_size);
                this.m_monsters[monster_index]
                    = new Monster(Util.randomItem(ALL_MONSTER_TYPES), grid_x, grid_y);
            }

            // initialize cities
            this.m_cities = [];
            var city_index;
            for (city_index = 0;
                city_index < GameConstants.m_initial_cities;
                ++city_index)
            {
                grid_x = Math.floor(Math.random() * GameConstants.m_grid_size);
                grid_y = Math.floor(Math.random() * GameConstants.m_grid_size);
                this.m_cities[city_index]
                    = new City(Util.randomItem(ALL_CITY_TYPES), grid_x, grid_y);
            }

            m_monster_info_box = new MonsterInfoBox();
        },

        //-------------------------------------------------------------------
        reset: function ()
        {
        },

        //-------------------------------------------------------------------
        handleMouseClick: function ()
        {
            var clicked_monster = null;
            Util.forEach(this.m_monsters, function(monster) {
                if (monster.isClicked())
                {
                    clicked_monster = monster;
                }
            });

            if (null != clicked_monster)
            {
                m_monster_info_box.showNextToMonster(clicked_monster);
            }
            else
            {
                m_monster_info_box.hide()
            }
        },

        //-------------------------------------------------------------------
        handleKeyPress: function ()
        {
        },

        //-------------------------------------------------------------------
        paint: function ()
        {
            g_ctx.setTransform(1, 0, 0, 1, 0, 0);

            // paint the land
            var grid_x, grid_y;
            for (grid_x = 0; grid_x < GameConstants.m_grid_size; ++grid_x)
            {
                for (grid_y = 0; grid_y < GameConstants.m_grid_size; ++grid_y)
                {
                    this.m_land[grid_x][grid_y].paint();
                }
            }

            Util.forEach(this.m_monsters, function(monster){
                monster.paint();
            });

            Util.forEach(this.m_cities, function(city){
                city.paint();
            });

            m_monster_info_box.paint();
        }
    };

    //--------------------------------------------------------------------------
    function eventLoop() {
        var start_time = Date.now();

        if (mouse_click_pending) {
            mouse_click_pending = false;
            current_screen.handleMouseClick();
        }

        if (key_press_pending) {
            key_press_pending = false;
            current_screen.handleKeyPress();
        }
        current_screen.paint();

        var end_time = Date.now();
        var comp_time = end_time - start_time;
        if (comp_time > 40 || comp_time < 0) {
            setTimeout(eventLoop, 0);
        }
        else {
            setTimeout(eventLoop, 40 - comp_time);
        }

    }

    // launch the game once the document is fully loaded
    $(document).ready(init);

</script>
</body>
</html>
